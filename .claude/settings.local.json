{
  "permissions": {
    "allow": [
      "Bash(find:*)",
      "Bash(python:*)",
      "Bash(PYTHONPATH=/mnt/d/Github/Enhanced-Structure-from-Motion python /mnt/d/Github/gaussian-splatting/test_enhanced_sfm.py)",
      "Bash(PYTHONPATH=/mnt/d/Github/Enhanced-Structure-from-Motion python -c \"\nimport os\nos.chdir(''/mnt/d/Github/gaussian-splatting'')\n\n# Test direct COLMAP import with environment setup\nos.environ[''CUDA_HOME''] = ''/usr/local/cuda-12.2''\nos.environ[''LD_LIBRARY_PATH''] = ''/usr/local/cuda-12.2/lib64:'' + os.environ.get(''LD_LIBRARY_PATH'', '''')\n\nfrom sfm.core.colmap_wrapper import safe_colmap_reconstruction\nfrom pathlib import Path\nimport torch\n\n# Load existing data\nfeatures_file = Path(''output/enhanced_sfm_test/features_tensors.pt'')\nmatches_file = Path(''output/enhanced_sfm_test/matches_tensors.pt'')\n\nif features_file.exists() and matches_file.exists():\n    print(''Loading existing features and matches...'')\n    features = torch.load(features_file, map_location=''cpu'')\n    matches = torch.load(matches_file, map_location=''cpu'')\n    \n    print(f''Features: {len(features)} images'')\n    print(f''Matches: {len(matches)} pairs'')\n    \n    # Convert to expected format\n    features_dict = {}\n    for img_path, tensor_data in features.items():\n        features_dict[img_path] = {\n            ''keypoints'': tensor_data[''keypoints''].cpu().numpy() if torch.is_tensor(tensor_data[''keypoints'']) else tensor_data[''keypoints''],\n            ''descriptors'': tensor_data[''descriptors''].cpu().numpy() if torch.is_tensor(tensor_data[''descriptors'']) else tensor_data[''descriptors''],\n            ''scores'': tensor_data[''scores''].cpu().numpy() if torch.is_tensor(tensor_data[''scores'']) else tensor_data[''scores''],\n            ''image_shape'': tensor_data[''image_shape'']\n        }\n    \n    matches_dict = {}\n    for pair, tensor_data in matches.items():\n        matches_dict[pair] = {\n            ''keypoints0'': tensor_data.get(''keypoints0'', tensor_data[''matches0'']),\n            ''keypoints1'': tensor_data.get(''keypoints1'', tensor_data[''matches1'']),\n            ''matches0'': tensor_data[''matches0''].cpu().numpy() if torch.is_tensor(tensor_data[''matches0'']) else tensor_data[''matches0''],\n            ''matches1'': tensor_data[''matches1''].cpu().numpy() if torch.is_tensor(tensor_data[''matches1'']) else tensor_data[''matches1''],\n            ''mscores0'': tensor_data[''mscores0''].cpu().numpy() if torch.is_tensor(tensor_data[''mscores0'']) else tensor_data[''mscores0''],\n            ''mscores1'': tensor_data[''mscores1''].cpu().numpy() if torch.is_tensor(tensor_data[''mscores1'']) else tensor_data[''mscores1'']\n        }\n    \n    print(''Testing COLMAP reconstruction...'')\n    result = safe_colmap_reconstruction(\n        features=features_dict,\n        matches=matches_dict,\n        output_path=Path(''output/enhanced_sfm_test''),\n        image_dir=Path(''ImageInputs/images''),\n        device=''cpu''\n    )\n    \n    print(f''Reconstruction result: {len(result[0])} points, {len(result[1])} cameras, {len(result[2])} images'')\nelse:\n    print(''No existing features/matches found'')\n\")",
      "Bash(PYTHONPATH:*)",
      "Bash(rm:*)"
    ],
    "deny": []
  }
}